//routing TABEL BUKU
//menampilkan daftar buku
app.get('/listbuku',(req,res)=>{
    db.query('SELECT * FROM buku', (err,results)=>{
        if(err){
            console.log(err)
            return
        }
        res.send(results.rows)
    })
})

//menambahkan daftar buku
app.post('/tambahbuku',(req,res)=>{
   const {judul, penulis, penerbit, tahun_terbit, jumlah_halaman, kategori} = req.body;
    db.query(`INSERT INTO buku (judul, penulis, penerbit, tahun_terbit, jumlah_halaman, kategori) VALUES ('${judul}', '${penulis}', '${penerbit}', ${tahun_terbit}, ${jumlah_halaman}, '${kategori}')`,
    (err)=>{
        if(err){
            console.log(err)
            return
        }
        res.send("Berhasil Menambahkan Data")
    })
})

//mengupdate daftar buku
app.put('/updatebuku',(req,res)=>{
    const {buku_id, judul, penulis, penerbit, tahun_terbit, jumlah_halaman, kategori} = req.body
    db.query(`UPDATE buku SET judul='${judul}', penulis='${penulis}', penerbit='${penerbit}', tahun_terbit='${tahun_terbit}', jumlah_halaman='${jumlah_halaman}', kategori='${kategori}' WHERE buku_id=${buku_id}`,
    (err)=>{
        if(err){
            console.log(err)
            return
        }
        res.send(`Data Buku dengan ID ${buku_id} berhasil diupdate`)
    })
})

//menghapus daftar buku
app.delete('/deletebuku',(req,res)=>{
        const { buku_id, judul, penulis, penerbit, tahun_terbit, jumlah_halaman, kategori } = req.body;
        db.query(`DELETE FROM buku WHERE buku_id=${buku_id}`,(err)=>{
        if(err){
            console.log(err)
            return
        }
        res.send(`Berhasil Menghapus Buku dengan ID ${buku_id}`)
    })
})

//melakukan pencarian buku berdasarkan judul
app.get('/carijudulbuku',(req,res)=>{
    const { judul } = req.body;
    db.query(`SELECT * FROM buku WHERE judul LIKE '%${judul}%'`,(err,results)=>{
        if(err){
            console.log(err)
            return
        }
        res.send(results.rows)
    })

})

//melakukan pencarian buku berdasarkan penulis
app.get('/caripenulisbuku',(req,res)=>{
    const { penulis } = req.body;
    db.query(`SELECT * FROM buku WHERE penulis LIKE '%${penulis}%'`,(err,results)=>{
        if(err){
            console.log(err)
            return
        }
        res.send(results.rows)
    })

})

//routing TABEL PEMINJAMAN
//menampilkan daftar peminjaman
app.get('/listpeminjaman',(req,res)=>{
    db.query('SELECT * FROM peminjaman', (err,results)=>{
        if(err){
            console.log(err)
            return
        }
        res.send(results.rows)
    })

})

app.post('/register', (req, res) => {
    const { name, email, password } = req.body;
        const query = `INSERT INTO peminjam (name, email, password) VALUES ( '${name}', '${email}', '${password}'); `;
        db.query(query, (err, results) => {
            if (err){
                console.error(err);
                alert('Registrasi gagal dilakukan!');
                return;
            }else{
                console.log(results);
                console.log("berhasil register");
            }
        });
    res.end('done');
});

router.post('/register', (req, res) => {
    temp = req.session;
    temp.nama_first_name = req.body.nama_first_name;
    temp.nama_last_name = req.body.nama_last_name;
    temp.password = req.body.pass;
    const { email, alamat, no_telepon } = req.body;
        bcrypt.hash(temp.password, 10, function (err, hash) {
        const query =
            `INSERT INTO peminjam (nama_first_name, nama_last_name, email, password, alamat, is_admin, no_telepon) VALUES ( '${temp.nama_first_name}','${temp.nama_last_name}', '${email}', '${hash}', '${alamat}', '${true}', '${no_telepon}'); `;
      
        db.query(query, (err, results) => {
        // tambahkan konfigurasi registrasi di sini
                if (err){
                    console.error(err);
                    alert('Registrasi gagal dilakukan!')
                    return;
            }else{
                console.log(results);
                console.log("Data insert berhasil");
            }
        });
    });
    
    res.end('done');
});

//routing TABEL PINJAM_BUKU
//membuat pinjaman buku
router.post('/tambahpinjaman',(req,res)=>{
    const { peminjam_id, judul, tanggal_pinjam, tanggal_kembali  } = req.body;
    db.query(`select * from buku where judul = '${judul}' and status='${'Tersedia'}'`, (err,results)=>{
        if(err){
            console.log(err)
             return
         }
         if(results.rowCount == 0){
             res.send("Buku tidak tersedia")
             return
         } else {
            db.query(`INSERT INTO pinjam_buku(peminjam_id, judul, tanggal_pinjam, tanggal_kembali) VALUES ('${peminjam_id}', '${judul}', '${tanggal_pinjam}', '${tanggal_kembali}')`,
            (err)=>{
            if(err){
                console.log(err)
                return
            }
            res.send("1")
            db.query(`UPDATE buku SET status='${'Tidak Tersedia'}' WHERE judul='${judul}'`,
            (err, res)=>{
            if(err){
                console.log(err)
                return
            }
            res.send("2")
            return
            })
        })
        }
    })
 })

 <script>
 document.addEventListener("DOMContentLoaded", async() => {
    const tableBody = $('#bookTable tbody');
    tableBody.empty();
  try {
    const response = await axios.get('/listbuku');
    console.log(response); // Log the response to inspect its structure

    // Handle the successful login response here (e.g., redirect to menu page)
    if (response.data.message === 'Data Found') {
        const items = response.data.showItems;
      items.forEach(function(item) {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${item.buku_id}</td>
          <td>${item.judul}</td>
          <td>${item.penulis}</td>
          <td>${item.penerbit}</td>
          <td>${item.tahun_terbit}</td>
          <td>${item.jumlah_halaman}</td>
          <td>${item.kategori_buku}</td>
          <td>${item.status}</td>
          <th>
          <a type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#rentBookModal">Pinjam</a>
          </th>
        `;
        tableBody.append(row);
      });
      $('bookTable').DataTable();
    } else {
      // Show error message to the user
      console.error(response.data.message);
    }
  } catch (error) {
    console.error(error);
    // Handle login error here (e.g., show error message to the user)
  }
});
</script>